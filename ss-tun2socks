#!/bin/bash

main_cfg='/etc/ss-tun2socks.conf'
main_cfg='ss-tun2socks.conf'

if [ ! -e "${main_cfg}" ]; then
    echo -e "\e[37m${main_cfg}\e[0m  [\e[1;35mnot_exist\e[0m]"
    exit 1
else
    source "${main_cfg}"
fi

function dnsfwd_update() {
cat << EOF > ~/.dnsforwarder/config
# Generated by ss-tproxy at $(date '+%F %T')
#### 日志相关 ####
LogOn ${dnsforwarder_log_on} # 启用日志
LogFileThresholdLength ${dnsforwarder_log_size} # 日志大小临界值，大于该值则将原文件备份，使用新文件记录日志
LogFileFolder ${dnsforwarder_log_dir} # 日志文件所在的文件夹
#### 监听地址 ####
UDPLocal ${dnsforwarder_listen} # 可以有多个，使用逗号隔开，默认端口53
#### 上游dns ####
UDPGroup ${dnsforwarder_upstream} * on # chinadns 作为上游 dns 服务器
BlockNegativeResponse ${dnsforwarder_upstream_block_negative_response} # 过滤上游 dns 未成功的响应
#### hosts文件 ####
Hosts ${dnsforwarder_hosts_url} # 本机 hosts 文件路径
HostsUpdateInterval ${dnsforwarder_hosts_update_interval} # 运行期间不重载 hosts
#### dns缓存 ####
UseCache ${dnsforwarder_cache_on} # 启用缓存（文件缓存）
MemoryCache ${dnsforwarder_cache_use_memory} # 不使用内存缓存
CacheSize ${dnsforwarder_cache_size} # 缓存大小，不能小于 102400
IgnoreTTL ${dnsforwarder_cache_ignore_ttl} # 忽略 TTL 值
CacheControl iok.la nocache # 不缓存以 'iok.la' 结尾的域名
ReloadCache ${dnsforwarder_cache_reload_on_start} # 启动时加载已有的文件缓存
OverwriteCache ${dnsforwarder_cache_overwrite_when_reload_failed} # 当已有的文件缓存载入失败时，覆盖原文件
EOF
}
function dnsfwd_flush() {
    if [ $(pgrep -c dnsforwarder) -eq 0 ]; then
        rm -fr ~/.dnsforwarder/cache
    else
        pgrep dnsforwarder | xargs kill -9 &> /dev/null
        rm -fr ~/.dnsforwarder/cache
        sleep 3
        dnsforwarder -d &> /dev/null
    fi
}

function chnip_update() {
    chnip_url="https://github.com/17mon/china_ip_list/raw/master/china_ip_list.txt"
    echo -n > ${ipset_save_file}
    curl -4sSkL ${chnip_url} | egrep -v '^\s*$|^\s*#' | xargs -n1 echo add chnip >> ${ipset_save_file}

    ipset -L chnip &> /dev/null
    if [ $? -ne 0 ]; then
        ipset -N chnip hash:net
    else
        ipset -F chnip &> /dev/null
    fi

    ipset -R < ${ipset_save_file}
    ipset -S chnip > ${ipset_save_file}
}

function ipts_update() {
    iptables -t mangle -F OUTPUT
    iptables -t mangle -F PREROUTING
    iptables -t mangle -X TUN2SOCKS &> /dev/null
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING

    iptables -t mangle -N TUN2SOCKS
    iptables -t mangle -A TUN2SOCKS -d 0/8 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 127/8 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 10/8 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 169.254/16 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 172.16/12 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 192.168/16 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 224/4 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d 240/4 -j RETURN
    iptables -t mangle -A TUN2SOCKS -d ${tun2socks_remote} -j RETURN
    iptables -t mangle -A TUN2SOCKS -m set --match-set chnip dst -j RETURN
    iptables -t mangle -A TUN2SOCKS -j MARK --set-mark ${iptables_mark}

    iptables -t mangle -A OUTPUT -p tcp -j TUN2SOCKS
    iptables -t mangle -A OUTPUT -p udp -j TUN2SOCKS
    iptables -t mangle -A PREROUTING -p udp -s ${iptables_intranet} ! -d ${iptables_intranet} --dport 53 -j ACCEPT
    iptables -t mangle -A PREROUTING -p tcp -s ${iptables_intranet} -j TUN2SOCKS
    iptables -t mangle -A PREROUTING -p udp -s ${iptables_intranet} -j TUN2SOCKS
    iptables -t nat -A PREROUTING -p udp -s ${iptables_intranet} ! -d ${iptables_intranet} --dport 53 -j REDIRECT --to-ports 53
    iptables -t nat -A POSTROUTING -s ${iptables_intranet} ! -d ${iptables_intranet} -j MASQUERADE
}
function ipts_origin() {
    iptables -t mangle -F OUTPUT
    iptables -t mangle -F PREROUTING
    iptables -t mangle -X TUN2SOCKS &> /dev/null
    iptables -t nat -F PREROUTING
    iptables -t nat -F POSTROUTING

    iptables -t nat -A PREROUTING -p udp -s ${iptables_intranet} -d ${iptables_intranet} --dport 53 -j DNAT --to-destination ${dns_original_1}
    iptables -t nat -A POSTROUTING -s ${iptables_intranet} ! -d ${iptables_intranet} -j MASQUERADE
}

function pbr_add() {
    ip route add 0/0 via ${tun2socks_gateway} dev ${tun2socks_tundev} table ${pbr_table}
    ip rule add fwmark ${iptables_mark} table ${pbr_table}
}
function pbr_del() {
    ip rule show | grep "fwmark ${iptables_mark}" | awk -F':' '{print $1}' | xargs -n1 ip rule del pref &> /dev/null
    ip route flush table ${pbr_table}
}

function kernel_opts() {
    if [ $(cat /proc/sys/net/ipv4/ip_forward) -ne 1 ]; then
        echo 1 > /proc/sys/net/ipv4/ip_forward
    fi
    if [ $(cat /proc/sys/net/ipv4/conf/$tun2socks_tundev/rp_filter) -ne 2 ]; then
        echo 2 > /proc/sys/net/ipv4/conf/$tun2socks_tundev/rp_filter
    fi
}

function dns_update() {
cat << EOF > /etc/resolv.conf
# Generated by ss-tproxy at $(date '+%F %T')
nameserver 127.0.0.1
EOF
}
function dns_origin() {
cat << EOF > /etc/resolv.conf
# Generated by ss-tproxy at $(date '+%F %T')
nameserver ${dns_original_1}
nameserver ${dns_original_2}
EOF
}

function current_ip() {
    ip_info=$(curl -4skL ip.chinaz.com/getip.aspx | sed -r "s/^\{ip:'(.*)',address:'(.*)'\}$/\1|\2/g")
    my_ip=$(echo ${ip_info} | awk -F'|' '{print $1}')
    my_loc=$(echo ${ip_info} | awk -F'|' '{print $2}')
    echo -e "\e[37mIP:\e[0m ${my_ip}\t\e[37m位置:\e[0m ${my_loc}"
}

function start() {
    if [ ! -e ${chinadns_chnroute} ]; then
        echo -e "\e[37m${chinadns_chnroute}\e[0m  [\e[1;35mnot_exist\e[0m]"
        exit 1
    fi

    socks5_port=$(echo $tun2socks_socks5 | awk -F: '{print $2}')
    if [ $(netstat -lnpt | grep :$socks5_port | wc -l) -eq 0 ]; then
        echo -e "\e[37m${tun2socks_socks5}/tcp\e[0m  [\e[1;35mno_listening\e[0m]"
        exit 1
    fi
    if [ $(netstat -lnpu | grep :$socks5_port | wc -l) -eq 0 ]; then
        echo -e "\e[37m${tun2socks_socks5}/udp\e[0m  [\e[1;35mno_listening\e[0m]"
        exit 1
    fi

    dns_origin

    nohup tun2socks -tun-device $tun2socks_tundev -tun-address $tun2socks_address -tun-mask $tun2socks_netmask -tun-gw $tun2socks_gateway -local-socks-addr $tun2socks_socks5 -public-only < /dev/null &>> $tun2socks_log &

    chinadns_params="-b ${chinadns_addr} -p ${chinadns_port} -s ${chinadns_upstream} -c ${chinadns_chnroute}"
    if [ "${chinadns_mutation}" = 'true' ]; then chinadns_params+=" -m"; fi
    if [ "${chinadns_verbose}" = 'true' ]; then chinadns_params+=" -v"; fi
    nohup chinadns $chinadns_params < /dev/null &>> "${chinadns_log}" &

    dnsfwd_update
    dnsforwarder -d &> /dev/null

    if [ ! -e ${ipset_save_file} ]; then
        chnip_update
    else
        ipset -X chnip &> /dev/null
        ipset -R < ${ipset_save_file}
    fi
    ipts_update
    pbr_add
	kernel_opts

    dns_update
}

function stop() {
    pgrep tun2socks | xargs kill &> /dev/null
    pgrep chinadns | xargs kill -9 &> /dev/null
    pgrep dnsforwarder | xargs kill -9 &> /dev/null

    ipts_origin
    ipset -X chnip &> /dev/null
    pbr_del

    dns_origin
}

function status() {
    if [ $(pgrep -c tun2socks) -ge 1 ]; then
        echo -e "\e[37mtun2socks\e[0m\t[\e[1;32mrunning\e[0m]"
    else
        echo -e "\e[37mtun2socks\e[0m\t[\e[1;35mstopped\e[0m]"
    fi

    if [ $(pgrep -c chinadns) -ge 1 ]; then
        echo -e "\e[37mchinadns\e[0m\t[\e[1;32mrunning\e[0m]"
    else
        echo -e "\e[37mchinadns\e[0m\t[\e[1;35mstopped\e[0m]"
    fi

    if [ $(pgrep -c dnsforwarder) -ge 1 ]; then
        echo -e "\e[37mdnsforwarder\e[0m\t[\e[1;32mrunning\e[0m]"
    else
        echo -e "\e[37mdnsforwarder\e[0m\t[\e[1;35mstopped\e[0m]"
    fi
}

function usage() {
{
    echo -e "\e[37mUsage:\e[0m \e[36m${0}\e[0m \e[1;37mCOMMAND\e[0m"
    echo -e "\e[1;37mCOMMAND\e[0m := {"
    echo -e "\t\e[33mstart\e[0m\t\tstart ss-tproxy"
    echo -e "\t\e[33mstop\e[0m\t\tstop ss-tproxy"
    echo -e "\t\e[33mrestart\e[0m\t\trestart ss-tproxy"
    echo -e "\t\e[33mstatus\e[0m\t\tshow ss-tproxy status"
    echo
    echo -e "\t\e[33mcurrent_ip\e[0m\tshow current_ip info"
    echo -e "\t\e[33mflush_dnsche\e[0m\tflush dnsforwarder cache"
    echo -e "\t\e[33mupdate_chnip\e[0m\tupdate ipset-chnip lists"
    echo -e "}"
} | more
}

case $1 in
star*)  # start
    start
    status
    ;;
stat*)  # status
    status
    ;;
sto*)   # stop
    stop
    status
    ;;
r*)     # restart
    stop
    status
    echo
    start
    status
    ;;

c*)     # current_ip
    current_ip
    ;;
f*)     # flush_dnsche
    dnsfwd_flush
    ;;
u*)     # update_chnip
    chnip_update
    ;;

h*)     # help
    usage
    ;;
*)
    usage
    exit 1
    ;;
esac
